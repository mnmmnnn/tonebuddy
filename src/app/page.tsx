"use client";

import { useEffect, useState } from "react";
import { PERSONA_QUOTES } from "./lib/persona";
import { resetCoinsDaily, getCoins, trySpendCoin } from "./lib/coins";

type TelegramWebApp = {
  ready: () => void;
  expand: () => void;
  themeParams?: { bg_color?: string };
};
type TelegramWindow = Window & { Telegram?: { WebApp?: TelegramWebApp } };

type Result = {
  tone: string;
  formality: string;
  clarity: string;
  issues: string[];
  explanations: string[];
  suggestions: string[];
  rewrites: {
    softer: string;
    shorter: string;
    friendlier: string;
    more_formal: string;
  };
};

export default function Home() {
  const [text, setText] = useState("");
  const [result, setResult] = useState<Result | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [buddyMsg, setBuddyMsg] = useState<string | null>(null);
  const [coins, setCoins] = useState(0);

  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–ø–ª–∏–∫–∞-–ø–æ–¥–∫–æ–ª (–Ω–µ "—Å–∫–∞—á–µ—Ç" –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ)
  const [greeting] = useState(
    () => PERSONA_QUOTES.greeting[Math.floor(Math.random() * PERSONA_QUOTES.greeting.length)]
  );

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  useEffect(() => {
    const saved = localStorage.getItem("tonebuddy:text");
    if (saved) setText(saved);
    document.querySelector<HTMLTextAreaElement>("textarea")?.focus();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
  useEffect(() => {
    localStorage.setItem("tonebuddy:text", text);
  }, [text]);

  // –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –º–æ–Ω–µ—Ç
  useEffect(() => {
    resetCoinsDaily();
    setCoins(getCoins());
  }, []);

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ Telegram Mini App
  useEffect(() => {
    const w = window as TelegramWindow;
    const tg = w.Telegram?.WebApp;
    if (!tg) return;
    tg.ready();
    tg.expand();
    const bg = tg.themeParams?.bg_color;
    if (bg) document.body.style.background = bg;
  }, []);

  const analyze = async () => {
    const msg = text.trim();
    if (!msg) {
      setBuddyMsg(
        PERSONA_QUOTES.noText[Math.floor(Math.random() * PERSONA_QUOTES.noText.length)]
      );
      return;
    }

    if (!trySpendCoin()) {
      setBuddyMsg(
        PERSONA_QUOTES.coinsEmpty[Math.floor(Math.random() * PERSONA_QUOTES.coinsEmpty.length)]
      );
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);
    setBuddyMsg(null);

    try {
      const r = await fetch("/api/analyze", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text: msg }),
      });
      const json = await r.json();
      if (!r.ok) throw new Error(json.error || "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞");
      setResult(json as Result);
      setCoins(getCoins());

      setBuddyMsg(
        PERSONA_QUOTES.afterAnalyze[
          Math.floor(Math.random() * PERSONA_QUOTES.afterAnalyze.length)
        ]
      );
    } catch (e: unknown) {
      const message = e instanceof Error ? e.message : String(e);
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  // Cmd/Ctrl + Enter –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑
  const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if ((e.metaKey || e.ctrlKey) && e.key === "Enter" && text.trim() && !loading) {
      e.preventDefault();
      analyze();
    }
  };

  const clearAll = () => {
    setText("");
    setResult(null);
    setError(null);
    setBuddyMsg(null);
    localStorage.removeItem("tonebuddy:text");
  };

  const charCount = text.length;
  const hasText = text.trim().length > 0;

  return (
    <main className="container">
      <h1 className="greeting">{greeting}</h1>

      <div style={{ position: "relative" }}>
        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          onKeyDown={onKeyDown}
          placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–°—Ä–æ—á–Ω–æ –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç—á—ë—Ç. –í—ã –æ–ø—è—Ç—å –∑–∞—Ç—è–Ω—É–ª–∏ —Å—Ä–æ–∫–∏.¬ª'
          aria-label="–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞"
          maxLength={2000}
        />
        {hasText && (
          <div
            style={{
              position: "absolute",
              bottom: "12px",
              right: "16px",
              fontSize: "12px",
              color: charCount > 1800 ? "#f59e0b" : "#6b6d7e",
              fontWeight: 600,
            }}
          >
            {charCount}/2000
          </div>
        )}
      </div>

      <div className="controls">
        <button onClick={analyze} disabled={!hasText || loading}>
          {loading ? "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..." : "‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–Ω"}
        </button>
        <button onClick={clearAll} disabled={loading}>
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
        </button>
      </div>

      <p className="hint">
        <span>üíé</span>
        <span>
          –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è: <strong style={{ color: coins === 0 ? "#ef4444" : "#10b981" }}>{coins}</strong>
        </span>
      </p>

      {buddyMsg && <div className="msg">{buddyMsg}</div>}
      {error && <div className="error">‚ö†Ô∏è {error}</div>}

      {result && (
        <section className="result">
          <div className="badges">
            <span className={`badge tone ${result.tone}`}>
              {getToneIcon(result.tone)} {getToneLabel(result.tone)}
            </span>
            <span className="badge">
              üìù {result.formality}
            </span>
            <span className="badge">
              üéØ {result.clarity}
            </span>
          </div>

          {result.issues?.length > 0 && (
            <div className="issues">
              <b>‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:</b> {result.issues.join(", ")}
            </div>
          )}

          <div className="card">
            <h3>üí° –ü–æ—á–µ–º—É —Ç–∞–∫</h3>
            <ul>
              {result.explanations.map((x, i) => (
                <li key={i}>{x}</li>
              ))}
            </ul>
          </div>

          <div className="card">
            <h3>üé® –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å</h3>
            <ul>
              {result.suggestions.map((x, i) => (
                <li key={i}>{x}</li>
              ))}
            </ul>
          </div>

          <div className="card">
            <h3>‚úèÔ∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∞</h3>
            <div className="rewrites">
              <Rewrite title="üå∏ –ú—è–≥—á–µ" text={result.rewrites.softer} />
              <Rewrite title="‚ö° –ö–æ—Ä–æ—á–µ" text={result.rewrites.shorter} />
              <Rewrite title="üòä –î—Ä—É–∂–µ–ª—é–±–Ω–µ–µ" text={result.rewrites.friendlier} />
              <Rewrite title="üé© –§–æ—Ä–º–∞–ª—å–Ω–µ–µ" text={result.rewrites.more_formal} />
            </div>
          </div>
        </section>
      )}
    </main>
  );
}

function Rewrite({ title, text }: { title: string; text: string }) {
  const [copied, setCopied] = useState(false);

  const copy = async () => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch {
      /* noop */
    }
  };

  return (
    <div className="rewrite">
      <div className="rewriteHead">
        <b>{title}</b>
        <button onClick={copy}>
          {copied ? "‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ" : "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"}
        </button>
      </div>
      <p className="rewriteText">{text}</p>
    </div>
  );
}

function getToneIcon(tone: string): string {
  const icons: Record<string, string> = {
    aggressive: "üî•",
    neutral: "üòê",
    cold: "‚ùÑÔ∏è",
    friendly: "üòä",
    passive_aggressive: "üòè",
  };
  return icons[tone] || "üí¨";
}

function getToneLabel(tone: string): string {
  const labels: Record<string, string> = {
    aggressive: "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
    neutral: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
    cold: "–•–æ–ª–æ–¥–Ω—ã–π",
    friendly: "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
    passive_aggressive: "–ü–∞—Å—Å–∏–≤–Ω–æ-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
  };
  return labels[tone] || tone;
}